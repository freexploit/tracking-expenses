schema {
  query: query_root
  mutation: mutation_root
  subscription: subscription_root
}

"""whether this query should be cached (Hasura Cloud only)"""
directive @cached(
  """measured in seconds"""
  ttl: Int! = 60

  """refresh the cache entry"""
  refresh: Boolean! = false
) on QUERY

"""
Boolean expression to compare columns of type "String". All fields are combined with logical 'AND'.
"""
input String_comparison_exp {
  _eq: String
  _gt: String
  _gte: String

  """does the column match the given case-insensitive pattern"""
  _ilike: String
  _in: [String!]

  """
  does the column match the given POSIX regular expression, case insensitive
  """
  _iregex: String
  _is_null: Boolean

  """does the column match the given pattern"""
  _like: String
  _lt: String
  _lte: String
  _neq: String

  """does the column NOT match the given case-insensitive pattern"""
  _nilike: String
  _nin: [String!]

  """
  does the column NOT match the given POSIX regular expression, case insensitive
  """
  _niregex: String

  """does the column NOT match the given pattern"""
  _nlike: String

  """
  does the column NOT match the given POSIX regular expression, case sensitive
  """
  _nregex: String

  """does the column NOT match the given SQL regular expression"""
  _nsimilar: String

  """
  does the column match the given POSIX regular expression, case sensitive
  """
  _regex: String

  """does the column match the given SQL regular expression"""
  _similar: String
}

"""ordering argument of a cursor"""
enum cursor_ordering {
  """ascending ordering of the cursor"""
  ASC

  """descending ordering of the cursor"""
  DESC
}

scalar date

"""
Boolean expression to compare columns of type "date". All fields are combined with logical 'AND'.
"""
input date_comparison_exp {
  _eq: date
  _gt: date
  _gte: date
  _in: [date!]
  _is_null: Boolean
  _lt: date
  _lte: date
  _neq: date
  _nin: [date!]
}

"""
columns and relationships of "expenses.bac_credomatic"
"""
type expenses_bac_credomatic {
  amount: float8!
  card_number: String!
  card_type: String!
  commerce: String!
  currency: String!
  date: date
  id: uuid!
  location: String!
}

"""
aggregated selection of "expenses.bac_credomatic"
"""
type expenses_bac_credomatic_aggregate {
  aggregate: expenses_bac_credomatic_aggregate_fields
  nodes: [expenses_bac_credomatic!]!
}

"""
aggregate fields of "expenses.bac_credomatic"
"""
type expenses_bac_credomatic_aggregate_fields {
  avg: expenses_bac_credomatic_avg_fields
  count(columns: [expenses_bac_credomatic_select_column!], distinct: Boolean): Int!
  max: expenses_bac_credomatic_max_fields
  min: expenses_bac_credomatic_min_fields
  stddev: expenses_bac_credomatic_stddev_fields
  stddev_pop: expenses_bac_credomatic_stddev_pop_fields
  stddev_samp: expenses_bac_credomatic_stddev_samp_fields
  sum: expenses_bac_credomatic_sum_fields
  var_pop: expenses_bac_credomatic_var_pop_fields
  var_samp: expenses_bac_credomatic_var_samp_fields
  variance: expenses_bac_credomatic_variance_fields
}

"""aggregate avg on columns"""
type expenses_bac_credomatic_avg_fields {
  amount: Float
}

"""
Boolean expression to filter rows from the table "expenses.bac_credomatic". All fields are combined with a logical 'AND'.
"""
input expenses_bac_credomatic_bool_exp {
  _and: [expenses_bac_credomatic_bool_exp!]
  _not: expenses_bac_credomatic_bool_exp
  _or: [expenses_bac_credomatic_bool_exp!]
  amount: float8_comparison_exp
  card_number: String_comparison_exp
  card_type: String_comparison_exp
  commerce: String_comparison_exp
  currency: String_comparison_exp
  date: date_comparison_exp
  id: uuid_comparison_exp
  location: String_comparison_exp
}

"""
unique or primary key constraints on table "expenses.bac_credomatic"
"""
enum expenses_bac_credomatic_constraint {
  """
  unique or primary key constraint on columns "id"
  """
  bac_credomatic_pkey
}

"""
input type for incrementing numeric columns in table "expenses.bac_credomatic"
"""
input expenses_bac_credomatic_inc_input {
  amount: float8
}

"""
input type for inserting data into table "expenses.bac_credomatic"
"""
input expenses_bac_credomatic_insert_input {
  amount: float8
  card_number: String
  card_type: String
  commerce: String
  currency: String
  date: date
  id: uuid
  location: String
}

"""aggregate max on columns"""
type expenses_bac_credomatic_max_fields {
  amount: float8
  card_number: String
  card_type: String
  commerce: String
  currency: String
  date: date
  id: uuid
  location: String
}

"""aggregate min on columns"""
type expenses_bac_credomatic_min_fields {
  amount: float8
  card_number: String
  card_type: String
  commerce: String
  currency: String
  date: date
  id: uuid
  location: String
}

"""
response of any mutation on the table "expenses.bac_credomatic"
"""
type expenses_bac_credomatic_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [expenses_bac_credomatic!]!
}

"""
on_conflict condition type for table "expenses.bac_credomatic"
"""
input expenses_bac_credomatic_on_conflict {
  constraint: expenses_bac_credomatic_constraint!
  update_columns: [expenses_bac_credomatic_update_column!]! = []
  where: expenses_bac_credomatic_bool_exp
}

"""Ordering options when selecting data from "expenses.bac_credomatic"."""
input expenses_bac_credomatic_order_by {
  amount: order_by
  card_number: order_by
  card_type: order_by
  commerce: order_by
  currency: order_by
  date: order_by
  id: order_by
  location: order_by
}

"""primary key columns input for table: expenses.bac_credomatic"""
input expenses_bac_credomatic_pk_columns_input {
  id: uuid!
}

"""
select columns of table "expenses.bac_credomatic"
"""
enum expenses_bac_credomatic_select_column {
  """column name"""
  amount

  """column name"""
  card_number

  """column name"""
  card_type

  """column name"""
  commerce

  """column name"""
  currency

  """column name"""
  date

  """column name"""
  id

  """column name"""
  location
}

"""
input type for updating data in table "expenses.bac_credomatic"
"""
input expenses_bac_credomatic_set_input {
  amount: float8
  card_number: String
  card_type: String
  commerce: String
  currency: String
  date: date
  id: uuid
  location: String
}

"""aggregate stddev on columns"""
type expenses_bac_credomatic_stddev_fields {
  amount: Float
}

"""aggregate stddev_pop on columns"""
type expenses_bac_credomatic_stddev_pop_fields {
  amount: Float
}

"""aggregate stddev_samp on columns"""
type expenses_bac_credomatic_stddev_samp_fields {
  amount: Float
}

"""
Streaming cursor of the table "expenses_bac_credomatic"
"""
input expenses_bac_credomatic_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: expenses_bac_credomatic_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input expenses_bac_credomatic_stream_cursor_value_input {
  amount: float8
  card_number: String
  card_type: String
  commerce: String
  currency: String
  date: date
  id: uuid
  location: String
}

"""aggregate sum on columns"""
type expenses_bac_credomatic_sum_fields {
  amount: float8
}

"""
update columns of table "expenses.bac_credomatic"
"""
enum expenses_bac_credomatic_update_column {
  """column name"""
  amount

  """column name"""
  card_number

  """column name"""
  card_type

  """column name"""
  commerce

  """column name"""
  currency

  """column name"""
  date

  """column name"""
  id

  """column name"""
  location
}

input expenses_bac_credomatic_updates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: expenses_bac_credomatic_inc_input

  """sets the columns of the filtered rows to the given values"""
  _set: expenses_bac_credomatic_set_input

  """filter the rows which have to be updated"""
  where: expenses_bac_credomatic_bool_exp!
}

"""aggregate var_pop on columns"""
type expenses_bac_credomatic_var_pop_fields {
  amount: Float
}

"""aggregate var_samp on columns"""
type expenses_bac_credomatic_var_samp_fields {
  amount: Float
}

"""aggregate variance on columns"""
type expenses_bac_credomatic_variance_fields {
  amount: Float
}

scalar float8

"""
Boolean expression to compare columns of type "float8". All fields are combined with logical 'AND'.
"""
input float8_comparison_exp {
  _eq: float8
  _gt: float8
  _gte: float8
  _in: [float8!]
  _is_null: Boolean
  _lt: float8
  _lte: float8
  _neq: float8
  _nin: [float8!]
}

"""mutation root"""
type mutation_root {
  """
  delete data from the table: "expenses.bac_credomatic"
  """
  delete_expenses_bac_credomatic(
    """filter the rows which have to be deleted"""
    where: expenses_bac_credomatic_bool_exp!
  ): expenses_bac_credomatic_mutation_response

  """
  delete single row from the table: "expenses.bac_credomatic"
  """
  delete_expenses_bac_credomatic_by_pk(id: uuid!): expenses_bac_credomatic

  """
  insert data into the table: "expenses.bac_credomatic"
  """
  insert_expenses_bac_credomatic(
    """the rows to be inserted"""
    objects: [expenses_bac_credomatic_insert_input!]!

    """upsert condition"""
    on_conflict: expenses_bac_credomatic_on_conflict
  ): expenses_bac_credomatic_mutation_response

  """
  insert a single row into the table: "expenses.bac_credomatic"
  """
  insert_expenses_bac_credomatic_one(
    """the row to be inserted"""
    object: expenses_bac_credomatic_insert_input!

    """upsert condition"""
    on_conflict: expenses_bac_credomatic_on_conflict
  ): expenses_bac_credomatic

  """
  update data of the table: "expenses.bac_credomatic"
  """
  update_expenses_bac_credomatic(
    """increments the numeric columns with given value of the filtered values"""
    _inc: expenses_bac_credomatic_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: expenses_bac_credomatic_set_input

    """filter the rows which have to be updated"""
    where: expenses_bac_credomatic_bool_exp!
  ): expenses_bac_credomatic_mutation_response

  """
  update single row of the table: "expenses.bac_credomatic"
  """
  update_expenses_bac_credomatic_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: expenses_bac_credomatic_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: expenses_bac_credomatic_set_input
    pk_columns: expenses_bac_credomatic_pk_columns_input!
  ): expenses_bac_credomatic

  """
  update multiples rows of table: "expenses.bac_credomatic"
  """
  update_expenses_bac_credomatic_many(
    """updates to execute, in order"""
    updates: [expenses_bac_credomatic_updates!]!
  ): [expenses_bac_credomatic_mutation_response]
}

"""column ordering options"""
enum order_by {
  """in ascending order, nulls last"""
  asc

  """in ascending order, nulls first"""
  asc_nulls_first

  """in ascending order, nulls last"""
  asc_nulls_last

  """in descending order, nulls first"""
  desc

  """in descending order, nulls first"""
  desc_nulls_first

  """in descending order, nulls last"""
  desc_nulls_last
}

type query_root {
  """
  fetch data from the table: "expenses.bac_credomatic"
  """
  expenses_bac_credomatic(
    """distinct select on columns"""
    distinct_on: [expenses_bac_credomatic_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [expenses_bac_credomatic_order_by!]

    """filter the rows returned"""
    where: expenses_bac_credomatic_bool_exp
  ): [expenses_bac_credomatic!]!

  """
  fetch aggregated fields from the table: "expenses.bac_credomatic"
  """
  expenses_bac_credomatic_aggregate(
    """distinct select on columns"""
    distinct_on: [expenses_bac_credomatic_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [expenses_bac_credomatic_order_by!]

    """filter the rows returned"""
    where: expenses_bac_credomatic_bool_exp
  ): expenses_bac_credomatic_aggregate!

  """
  fetch data from the table: "expenses.bac_credomatic" using primary key columns
  """
  expenses_bac_credomatic_by_pk(id: uuid!): expenses_bac_credomatic
}

type subscription_root {
  """
  fetch data from the table: "expenses.bac_credomatic"
  """
  expenses_bac_credomatic(
    """distinct select on columns"""
    distinct_on: [expenses_bac_credomatic_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [expenses_bac_credomatic_order_by!]

    """filter the rows returned"""
    where: expenses_bac_credomatic_bool_exp
  ): [expenses_bac_credomatic!]!

  """
  fetch aggregated fields from the table: "expenses.bac_credomatic"
  """
  expenses_bac_credomatic_aggregate(
    """distinct select on columns"""
    distinct_on: [expenses_bac_credomatic_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [expenses_bac_credomatic_order_by!]

    """filter the rows returned"""
    where: expenses_bac_credomatic_bool_exp
  ): expenses_bac_credomatic_aggregate!

  """
  fetch data from the table: "expenses.bac_credomatic" using primary key columns
  """
  expenses_bac_credomatic_by_pk(id: uuid!): expenses_bac_credomatic

  """
  fetch data from the table in a streaming manner: "expenses.bac_credomatic"
  """
  expenses_bac_credomatic_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [expenses_bac_credomatic_stream_cursor_input]!

    """filter the rows returned"""
    where: expenses_bac_credomatic_bool_exp
  ): [expenses_bac_credomatic!]!
}

scalar uuid

"""
Boolean expression to compare columns of type "uuid". All fields are combined with logical 'AND'.
"""
input uuid_comparison_exp {
  _eq: uuid
  _gt: uuid
  _gte: uuid
  _in: [uuid!]
  _is_null: Boolean
  _lt: uuid
  _lte: uuid
  _neq: uuid
  _nin: [uuid!]
}

