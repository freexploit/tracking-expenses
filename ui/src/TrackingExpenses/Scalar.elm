-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module TrackingExpenses.Scalar exposing (Codecs, Date(..), Float8(..), Uuid(..), defaultCodecs, defineCodecs, unwrapCodecs, unwrapEncoder)

import Graphql.Codec exposing (Codec)
import Graphql.Internal.Builder.Object as Object
import Graphql.Internal.Encode
import Json.Decode as Decode exposing (Decoder)
import Json.Encode as Encode


type Date
    = Date String


type Float8
    = Float8 String


type Uuid
    = Uuid String


defineCodecs :
    { codecDate : Codec valueDate
    , codecFloat8 : Codec valueFloat8
    , codecUuid : Codec valueUuid
    }
    -> Codecs valueDate valueFloat8 valueUuid
defineCodecs definitions =
    Codecs definitions


unwrapCodecs :
    Codecs valueDate valueFloat8 valueUuid
    ->
        { codecDate : Codec valueDate
        , codecFloat8 : Codec valueFloat8
        , codecUuid : Codec valueUuid
        }
unwrapCodecs (Codecs unwrappedCodecs) =
    unwrappedCodecs


unwrapEncoder :
    (RawCodecs valueDate valueFloat8 valueUuid -> Codec getterValue)
    -> Codecs valueDate valueFloat8 valueUuid
    -> getterValue
    -> Graphql.Internal.Encode.Value
unwrapEncoder getter (Codecs unwrappedCodecs) =
    (unwrappedCodecs |> getter |> .encoder) >> Graphql.Internal.Encode.fromJson


type Codecs valueDate valueFloat8 valueUuid
    = Codecs (RawCodecs valueDate valueFloat8 valueUuid)


type alias RawCodecs valueDate valueFloat8 valueUuid =
    { codecDate : Codec valueDate
    , codecFloat8 : Codec valueFloat8
    , codecUuid : Codec valueUuid
    }


defaultCodecs : RawCodecs Date Float8 Uuid
defaultCodecs =
    { codecDate =
        { encoder = \(Date raw) -> Encode.string raw
        , decoder = Object.scalarDecoder |> Decode.map Date
        }
    , codecFloat8 =
        { encoder = \(Float8 raw) -> Encode.string raw
        , decoder = Object.scalarDecoder |> Decode.map Float8
        }
    , codecUuid =
        { encoder = \(Uuid raw) -> Encode.string raw
        , decoder = Object.scalarDecoder |> Decode.map Uuid
        }
    }
