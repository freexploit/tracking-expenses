-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module TrackingExpenses.InputObject exposing (..)

import Graphql.Internal.Builder.Argument as Argument exposing (Argument)
import Graphql.Internal.Builder.Object as Object
import Graphql.Internal.Encode as Encode exposing (Value)
import Graphql.OptionalArgument exposing (OptionalArgument(..))
import Graphql.SelectionSet exposing (SelectionSet)
import Json.Decode as Decode
import TrackingExpenses.Enum.Expenses_bac_credomatic_constraint
import TrackingExpenses.Enum.Expenses_bac_credomatic_update_column
import TrackingExpenses.Enum.Order_by
import TrackingExpenses.Interface
import TrackingExpenses.Object
import TrackingExpenses.Scalar
import TrackingExpenses.ScalarCodecs
import TrackingExpenses.Union


buildDate_comparison_exp :
    (Date_comparison_expOptionalFields -> Date_comparison_expOptionalFields)
    -> Date_comparison_exp
buildDate_comparison_exp fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { eq_ = Absent, gt_ = Absent, gte_ = Absent, in_ = Absent, is_null_ = Absent, lt_ = Absent, lte_ = Absent, neq_ = Absent, nin_ = Absent }
    in
    { eq_ = optionals____.eq_, gt_ = optionals____.gt_, gte_ = optionals____.gte_, in_ = optionals____.in_, is_null_ = optionals____.is_null_, lt_ = optionals____.lt_, lte_ = optionals____.lte_, neq_ = optionals____.neq_, nin_ = optionals____.nin_ }


type alias Date_comparison_expOptionalFields =
    { eq_ : OptionalArgument TrackingExpenses.ScalarCodecs.Date
    , gt_ : OptionalArgument TrackingExpenses.ScalarCodecs.Date
    , gte_ : OptionalArgument TrackingExpenses.ScalarCodecs.Date
    , in_ : OptionalArgument (List TrackingExpenses.ScalarCodecs.Date)
    , is_null_ : OptionalArgument Bool
    , lt_ : OptionalArgument TrackingExpenses.ScalarCodecs.Date
    , lte_ : OptionalArgument TrackingExpenses.ScalarCodecs.Date
    , neq_ : OptionalArgument TrackingExpenses.ScalarCodecs.Date
    , nin_ : OptionalArgument (List TrackingExpenses.ScalarCodecs.Date)
    }


{-| Type for the Date\_comparison\_exp input object.
-}
type alias Date_comparison_exp =
    { eq_ : OptionalArgument TrackingExpenses.ScalarCodecs.Date
    , gt_ : OptionalArgument TrackingExpenses.ScalarCodecs.Date
    , gte_ : OptionalArgument TrackingExpenses.ScalarCodecs.Date
    , in_ : OptionalArgument (List TrackingExpenses.ScalarCodecs.Date)
    , is_null_ : OptionalArgument Bool
    , lt_ : OptionalArgument TrackingExpenses.ScalarCodecs.Date
    , lte_ : OptionalArgument TrackingExpenses.ScalarCodecs.Date
    , neq_ : OptionalArgument TrackingExpenses.ScalarCodecs.Date
    , nin_ : OptionalArgument (List TrackingExpenses.ScalarCodecs.Date)
    }


{-| Encode a Date\_comparison\_exp into a value that can be used as an argument.
-}
encodeDate_comparison_exp : Date_comparison_exp -> Value
encodeDate_comparison_exp input____ =
    Encode.maybeObject
        [ ( "_eq", (TrackingExpenses.ScalarCodecs.codecs |> TrackingExpenses.Scalar.unwrapEncoder .codecDate) |> Encode.optional input____.eq_ ), ( "_gt", (TrackingExpenses.ScalarCodecs.codecs |> TrackingExpenses.Scalar.unwrapEncoder .codecDate) |> Encode.optional input____.gt_ ), ( "_gte", (TrackingExpenses.ScalarCodecs.codecs |> TrackingExpenses.Scalar.unwrapEncoder .codecDate) |> Encode.optional input____.gte_ ), ( "_in", ((TrackingExpenses.ScalarCodecs.codecs |> TrackingExpenses.Scalar.unwrapEncoder .codecDate) |> Encode.list) |> Encode.optional input____.in_ ), ( "_is_null", Encode.bool |> Encode.optional input____.is_null_ ), ( "_lt", (TrackingExpenses.ScalarCodecs.codecs |> TrackingExpenses.Scalar.unwrapEncoder .codecDate) |> Encode.optional input____.lt_ ), ( "_lte", (TrackingExpenses.ScalarCodecs.codecs |> TrackingExpenses.Scalar.unwrapEncoder .codecDate) |> Encode.optional input____.lte_ ), ( "_neq", (TrackingExpenses.ScalarCodecs.codecs |> TrackingExpenses.Scalar.unwrapEncoder .codecDate) |> Encode.optional input____.neq_ ), ( "_nin", ((TrackingExpenses.ScalarCodecs.codecs |> TrackingExpenses.Scalar.unwrapEncoder .codecDate) |> Encode.list) |> Encode.optional input____.nin_ ) ]


buildExpenses_bac_credomatic_bool_exp :
    (Expenses_bac_credomatic_bool_expOptionalFields -> Expenses_bac_credomatic_bool_expOptionalFields)
    -> Expenses_bac_credomatic_bool_exp
buildExpenses_bac_credomatic_bool_exp fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { and_ = Absent, not_ = Absent, or_ = Absent, amount = Absent, card_number = Absent, card_type = Absent, commerce = Absent, currency = Absent, date = Absent, id = Absent, location = Absent }
    in
    Expenses_bac_credomatic_bool_exp { and_ = optionals____.and_, not_ = optionals____.not_, or_ = optionals____.or_, amount = optionals____.amount, card_number = optionals____.card_number, card_type = optionals____.card_type, commerce = optionals____.commerce, currency = optionals____.currency, date = optionals____.date, id = optionals____.id, location = optionals____.location }


type alias Expenses_bac_credomatic_bool_expOptionalFields =
    { and_ : OptionalArgument (List Expenses_bac_credomatic_bool_exp)
    , not_ : OptionalArgument Expenses_bac_credomatic_bool_exp
    , or_ : OptionalArgument (List Expenses_bac_credomatic_bool_exp)
    , amount : OptionalArgument Float8_comparison_exp
    , card_number : OptionalArgument String_comparison_exp
    , card_type : OptionalArgument String_comparison_exp
    , commerce : OptionalArgument String_comparison_exp
    , currency : OptionalArgument String_comparison_exp
    , date : OptionalArgument Date_comparison_exp
    , id : OptionalArgument Uuid_comparison_exp
    , location : OptionalArgument String_comparison_exp
    }


{-| Type alias for the `Expenses_bac_credomatic_bool_exp` attributes. Note that this type
needs to use the `Expenses_bac_credomatic_bool_exp` type (not just a plain type alias) because it has
references to itself either directly (recursive) or indirectly (circular). See
<https://github.com/dillonkearns/elm-graphql/issues/33>.
-}
type alias Expenses_bac_credomatic_bool_expRaw =
    { and_ : OptionalArgument (List Expenses_bac_credomatic_bool_exp)
    , not_ : OptionalArgument Expenses_bac_credomatic_bool_exp
    , or_ : OptionalArgument (List Expenses_bac_credomatic_bool_exp)
    , amount : OptionalArgument Float8_comparison_exp
    , card_number : OptionalArgument String_comparison_exp
    , card_type : OptionalArgument String_comparison_exp
    , commerce : OptionalArgument String_comparison_exp
    , currency : OptionalArgument String_comparison_exp
    , date : OptionalArgument Date_comparison_exp
    , id : OptionalArgument Uuid_comparison_exp
    , location : OptionalArgument String_comparison_exp
    }


{-| Type for the Expenses\_bac\_credomatic\_bool\_exp input object.
-}
type Expenses_bac_credomatic_bool_exp
    = Expenses_bac_credomatic_bool_exp Expenses_bac_credomatic_bool_expRaw


{-| Encode a Expenses\_bac\_credomatic\_bool\_exp into a value that can be used as an argument.
-}
encodeExpenses_bac_credomatic_bool_exp : Expenses_bac_credomatic_bool_exp -> Value
encodeExpenses_bac_credomatic_bool_exp (Expenses_bac_credomatic_bool_exp input____) =
    Encode.maybeObject
        [ ( "_and", (encodeExpenses_bac_credomatic_bool_exp |> Encode.list) |> Encode.optional input____.and_ ), ( "_not", encodeExpenses_bac_credomatic_bool_exp |> Encode.optional input____.not_ ), ( "_or", (encodeExpenses_bac_credomatic_bool_exp |> Encode.list) |> Encode.optional input____.or_ ), ( "amount", encodeFloat8_comparison_exp |> Encode.optional input____.amount ), ( "card_number", encodeString_comparison_exp |> Encode.optional input____.card_number ), ( "card_type", encodeString_comparison_exp |> Encode.optional input____.card_type ), ( "commerce", encodeString_comparison_exp |> Encode.optional input____.commerce ), ( "currency", encodeString_comparison_exp |> Encode.optional input____.currency ), ( "date", encodeDate_comparison_exp |> Encode.optional input____.date ), ( "id", encodeUuid_comparison_exp |> Encode.optional input____.id ), ( "location", encodeString_comparison_exp |> Encode.optional input____.location ) ]


buildExpenses_bac_credomatic_inc_input :
    (Expenses_bac_credomatic_inc_inputOptionalFields -> Expenses_bac_credomatic_inc_inputOptionalFields)
    -> Expenses_bac_credomatic_inc_input
buildExpenses_bac_credomatic_inc_input fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { amount = Absent }
    in
    { amount = optionals____.amount }


type alias Expenses_bac_credomatic_inc_inputOptionalFields =
    { amount : OptionalArgument TrackingExpenses.ScalarCodecs.Float8 }


{-| Type for the Expenses\_bac\_credomatic\_inc\_input input object.
-}
type alias Expenses_bac_credomatic_inc_input =
    { amount : OptionalArgument TrackingExpenses.ScalarCodecs.Float8 }


{-| Encode a Expenses\_bac\_credomatic\_inc\_input into a value that can be used as an argument.
-}
encodeExpenses_bac_credomatic_inc_input : Expenses_bac_credomatic_inc_input -> Value
encodeExpenses_bac_credomatic_inc_input input____ =
    Encode.maybeObject
        [ ( "amount", (TrackingExpenses.ScalarCodecs.codecs |> TrackingExpenses.Scalar.unwrapEncoder .codecFloat8) |> Encode.optional input____.amount ) ]


buildExpenses_bac_credomatic_insert_input :
    (Expenses_bac_credomatic_insert_inputOptionalFields -> Expenses_bac_credomatic_insert_inputOptionalFields)
    -> Expenses_bac_credomatic_insert_input
buildExpenses_bac_credomatic_insert_input fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { amount = Absent, card_number = Absent, card_type = Absent, commerce = Absent, currency = Absent, date = Absent, id = Absent, location = Absent }
    in
    { amount = optionals____.amount, card_number = optionals____.card_number, card_type = optionals____.card_type, commerce = optionals____.commerce, currency = optionals____.currency, date = optionals____.date, id = optionals____.id, location = optionals____.location }


type alias Expenses_bac_credomatic_insert_inputOptionalFields =
    { amount : OptionalArgument TrackingExpenses.ScalarCodecs.Float8
    , card_number : OptionalArgument String
    , card_type : OptionalArgument String
    , commerce : OptionalArgument String
    , currency : OptionalArgument String
    , date : OptionalArgument TrackingExpenses.ScalarCodecs.Date
    , id : OptionalArgument TrackingExpenses.ScalarCodecs.Uuid
    , location : OptionalArgument String
    }


{-| Type for the Expenses\_bac\_credomatic\_insert\_input input object.
-}
type alias Expenses_bac_credomatic_insert_input =
    { amount : OptionalArgument TrackingExpenses.ScalarCodecs.Float8
    , card_number : OptionalArgument String
    , card_type : OptionalArgument String
    , commerce : OptionalArgument String
    , currency : OptionalArgument String
    , date : OptionalArgument TrackingExpenses.ScalarCodecs.Date
    , id : OptionalArgument TrackingExpenses.ScalarCodecs.Uuid
    , location : OptionalArgument String
    }


{-| Encode a Expenses\_bac\_credomatic\_insert\_input into a value that can be used as an argument.
-}
encodeExpenses_bac_credomatic_insert_input : Expenses_bac_credomatic_insert_input -> Value
encodeExpenses_bac_credomatic_insert_input input____ =
    Encode.maybeObject
        [ ( "amount", (TrackingExpenses.ScalarCodecs.codecs |> TrackingExpenses.Scalar.unwrapEncoder .codecFloat8) |> Encode.optional input____.amount ), ( "card_number", Encode.string |> Encode.optional input____.card_number ), ( "card_type", Encode.string |> Encode.optional input____.card_type ), ( "commerce", Encode.string |> Encode.optional input____.commerce ), ( "currency", Encode.string |> Encode.optional input____.currency ), ( "date", (TrackingExpenses.ScalarCodecs.codecs |> TrackingExpenses.Scalar.unwrapEncoder .codecDate) |> Encode.optional input____.date ), ( "id", (TrackingExpenses.ScalarCodecs.codecs |> TrackingExpenses.Scalar.unwrapEncoder .codecUuid) |> Encode.optional input____.id ), ( "location", Encode.string |> Encode.optional input____.location ) ]


buildExpenses_bac_credomatic_on_conflict :
    Expenses_bac_credomatic_on_conflictRequiredFields
    -> (Expenses_bac_credomatic_on_conflictOptionalFields -> Expenses_bac_credomatic_on_conflictOptionalFields)
    -> Expenses_bac_credomatic_on_conflict
buildExpenses_bac_credomatic_on_conflict required____ fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { where_ = Absent }
    in
    Expenses_bac_credomatic_on_conflict { constraint = required____.constraint, update_columns = required____.update_columns, where_ = optionals____.where_ }


type alias Expenses_bac_credomatic_on_conflictRequiredFields =
    { constraint : TrackingExpenses.Enum.Expenses_bac_credomatic_constraint.Expenses_bac_credomatic_constraint
    , update_columns : List TrackingExpenses.Enum.Expenses_bac_credomatic_update_column.Expenses_bac_credomatic_update_column
    }


type alias Expenses_bac_credomatic_on_conflictOptionalFields =
    { where_ : OptionalArgument Expenses_bac_credomatic_bool_exp }


{-| Type alias for the `Expenses_bac_credomatic_on_conflict` attributes. Note that this type
needs to use the `Expenses_bac_credomatic_on_conflict` type (not just a plain type alias) because it has
references to itself either directly (recursive) or indirectly (circular). See
<https://github.com/dillonkearns/elm-graphql/issues/33>.
-}
type alias Expenses_bac_credomatic_on_conflictRaw =
    { constraint : TrackingExpenses.Enum.Expenses_bac_credomatic_constraint.Expenses_bac_credomatic_constraint
    , update_columns : List TrackingExpenses.Enum.Expenses_bac_credomatic_update_column.Expenses_bac_credomatic_update_column
    , where_ : OptionalArgument Expenses_bac_credomatic_bool_exp
    }


{-| Type for the Expenses\_bac\_credomatic\_on\_conflict input object.
-}
type Expenses_bac_credomatic_on_conflict
    = Expenses_bac_credomatic_on_conflict Expenses_bac_credomatic_on_conflictRaw


{-| Encode a Expenses\_bac\_credomatic\_on\_conflict into a value that can be used as an argument.
-}
encodeExpenses_bac_credomatic_on_conflict : Expenses_bac_credomatic_on_conflict -> Value
encodeExpenses_bac_credomatic_on_conflict (Expenses_bac_credomatic_on_conflict input____) =
    Encode.maybeObject
        [ ( "constraint", Encode.enum TrackingExpenses.Enum.Expenses_bac_credomatic_constraint.toString input____.constraint |> Just ), ( "update_columns", (Encode.enum TrackingExpenses.Enum.Expenses_bac_credomatic_update_column.toString |> Encode.list) input____.update_columns |> Just ), ( "where", encodeExpenses_bac_credomatic_bool_exp |> Encode.optional input____.where_ ) ]


buildExpenses_bac_credomatic_order_by :
    (Expenses_bac_credomatic_order_byOptionalFields -> Expenses_bac_credomatic_order_byOptionalFields)
    -> Expenses_bac_credomatic_order_by
buildExpenses_bac_credomatic_order_by fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { amount = Absent, card_number = Absent, card_type = Absent, commerce = Absent, currency = Absent, date = Absent, id = Absent, location = Absent }
    in
    { amount = optionals____.amount, card_number = optionals____.card_number, card_type = optionals____.card_type, commerce = optionals____.commerce, currency = optionals____.currency, date = optionals____.date, id = optionals____.id, location = optionals____.location }


type alias Expenses_bac_credomatic_order_byOptionalFields =
    { amount : OptionalArgument TrackingExpenses.Enum.Order_by.Order_by
    , card_number : OptionalArgument TrackingExpenses.Enum.Order_by.Order_by
    , card_type : OptionalArgument TrackingExpenses.Enum.Order_by.Order_by
    , commerce : OptionalArgument TrackingExpenses.Enum.Order_by.Order_by
    , currency : OptionalArgument TrackingExpenses.Enum.Order_by.Order_by
    , date : OptionalArgument TrackingExpenses.Enum.Order_by.Order_by
    , id : OptionalArgument TrackingExpenses.Enum.Order_by.Order_by
    , location : OptionalArgument TrackingExpenses.Enum.Order_by.Order_by
    }


{-| Type for the Expenses\_bac\_credomatic\_order\_by input object.
-}
type alias Expenses_bac_credomatic_order_by =
    { amount : OptionalArgument TrackingExpenses.Enum.Order_by.Order_by
    , card_number : OptionalArgument TrackingExpenses.Enum.Order_by.Order_by
    , card_type : OptionalArgument TrackingExpenses.Enum.Order_by.Order_by
    , commerce : OptionalArgument TrackingExpenses.Enum.Order_by.Order_by
    , currency : OptionalArgument TrackingExpenses.Enum.Order_by.Order_by
    , date : OptionalArgument TrackingExpenses.Enum.Order_by.Order_by
    , id : OptionalArgument TrackingExpenses.Enum.Order_by.Order_by
    , location : OptionalArgument TrackingExpenses.Enum.Order_by.Order_by
    }


{-| Encode a Expenses\_bac\_credomatic\_order\_by into a value that can be used as an argument.
-}
encodeExpenses_bac_credomatic_order_by : Expenses_bac_credomatic_order_by -> Value
encodeExpenses_bac_credomatic_order_by input____ =
    Encode.maybeObject
        [ ( "amount", Encode.enum TrackingExpenses.Enum.Order_by.toString |> Encode.optional input____.amount ), ( "card_number", Encode.enum TrackingExpenses.Enum.Order_by.toString |> Encode.optional input____.card_number ), ( "card_type", Encode.enum TrackingExpenses.Enum.Order_by.toString |> Encode.optional input____.card_type ), ( "commerce", Encode.enum TrackingExpenses.Enum.Order_by.toString |> Encode.optional input____.commerce ), ( "currency", Encode.enum TrackingExpenses.Enum.Order_by.toString |> Encode.optional input____.currency ), ( "date", Encode.enum TrackingExpenses.Enum.Order_by.toString |> Encode.optional input____.date ), ( "id", Encode.enum TrackingExpenses.Enum.Order_by.toString |> Encode.optional input____.id ), ( "location", Encode.enum TrackingExpenses.Enum.Order_by.toString |> Encode.optional input____.location ) ]


buildExpenses_bac_credomatic_pk_columns_input :
    Expenses_bac_credomatic_pk_columns_inputRequiredFields
    -> Expenses_bac_credomatic_pk_columns_input
buildExpenses_bac_credomatic_pk_columns_input required____ =
    { id = required____.id }


type alias Expenses_bac_credomatic_pk_columns_inputRequiredFields =
    { id : TrackingExpenses.ScalarCodecs.Uuid }


{-| Type for the Expenses\_bac\_credomatic\_pk\_columns\_input input object.
-}
type alias Expenses_bac_credomatic_pk_columns_input =
    { id : TrackingExpenses.ScalarCodecs.Uuid }


{-| Encode a Expenses\_bac\_credomatic\_pk\_columns\_input into a value that can be used as an argument.
-}
encodeExpenses_bac_credomatic_pk_columns_input : Expenses_bac_credomatic_pk_columns_input -> Value
encodeExpenses_bac_credomatic_pk_columns_input input____ =
    Encode.maybeObject
        [ ( "id", (TrackingExpenses.ScalarCodecs.codecs |> TrackingExpenses.Scalar.unwrapEncoder .codecUuid) input____.id |> Just ) ]


buildExpenses_bac_credomatic_set_input :
    (Expenses_bac_credomatic_set_inputOptionalFields -> Expenses_bac_credomatic_set_inputOptionalFields)
    -> Expenses_bac_credomatic_set_input
buildExpenses_bac_credomatic_set_input fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { amount = Absent, card_number = Absent, card_type = Absent, commerce = Absent, currency = Absent, date = Absent, id = Absent, location = Absent }
    in
    { amount = optionals____.amount, card_number = optionals____.card_number, card_type = optionals____.card_type, commerce = optionals____.commerce, currency = optionals____.currency, date = optionals____.date, id = optionals____.id, location = optionals____.location }


type alias Expenses_bac_credomatic_set_inputOptionalFields =
    { amount : OptionalArgument TrackingExpenses.ScalarCodecs.Float8
    , card_number : OptionalArgument String
    , card_type : OptionalArgument String
    , commerce : OptionalArgument String
    , currency : OptionalArgument String
    , date : OptionalArgument TrackingExpenses.ScalarCodecs.Date
    , id : OptionalArgument TrackingExpenses.ScalarCodecs.Uuid
    , location : OptionalArgument String
    }


{-| Type for the Expenses\_bac\_credomatic\_set\_input input object.
-}
type alias Expenses_bac_credomatic_set_input =
    { amount : OptionalArgument TrackingExpenses.ScalarCodecs.Float8
    , card_number : OptionalArgument String
    , card_type : OptionalArgument String
    , commerce : OptionalArgument String
    , currency : OptionalArgument String
    , date : OptionalArgument TrackingExpenses.ScalarCodecs.Date
    , id : OptionalArgument TrackingExpenses.ScalarCodecs.Uuid
    , location : OptionalArgument String
    }


{-| Encode a Expenses\_bac\_credomatic\_set\_input into a value that can be used as an argument.
-}
encodeExpenses_bac_credomatic_set_input : Expenses_bac_credomatic_set_input -> Value
encodeExpenses_bac_credomatic_set_input input____ =
    Encode.maybeObject
        [ ( "amount", (TrackingExpenses.ScalarCodecs.codecs |> TrackingExpenses.Scalar.unwrapEncoder .codecFloat8) |> Encode.optional input____.amount ), ( "card_number", Encode.string |> Encode.optional input____.card_number ), ( "card_type", Encode.string |> Encode.optional input____.card_type ), ( "commerce", Encode.string |> Encode.optional input____.commerce ), ( "currency", Encode.string |> Encode.optional input____.currency ), ( "date", (TrackingExpenses.ScalarCodecs.codecs |> TrackingExpenses.Scalar.unwrapEncoder .codecDate) |> Encode.optional input____.date ), ( "id", (TrackingExpenses.ScalarCodecs.codecs |> TrackingExpenses.Scalar.unwrapEncoder .codecUuid) |> Encode.optional input____.id ), ( "location", Encode.string |> Encode.optional input____.location ) ]


buildFloat8_comparison_exp :
    (Float8_comparison_expOptionalFields -> Float8_comparison_expOptionalFields)
    -> Float8_comparison_exp
buildFloat8_comparison_exp fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { eq_ = Absent, gt_ = Absent, gte_ = Absent, in_ = Absent, is_null_ = Absent, lt_ = Absent, lte_ = Absent, neq_ = Absent, nin_ = Absent }
    in
    { eq_ = optionals____.eq_, gt_ = optionals____.gt_, gte_ = optionals____.gte_, in_ = optionals____.in_, is_null_ = optionals____.is_null_, lt_ = optionals____.lt_, lte_ = optionals____.lte_, neq_ = optionals____.neq_, nin_ = optionals____.nin_ }


type alias Float8_comparison_expOptionalFields =
    { eq_ : OptionalArgument TrackingExpenses.ScalarCodecs.Float8
    , gt_ : OptionalArgument TrackingExpenses.ScalarCodecs.Float8
    , gte_ : OptionalArgument TrackingExpenses.ScalarCodecs.Float8
    , in_ : OptionalArgument (List TrackingExpenses.ScalarCodecs.Float8)
    , is_null_ : OptionalArgument Bool
    , lt_ : OptionalArgument TrackingExpenses.ScalarCodecs.Float8
    , lte_ : OptionalArgument TrackingExpenses.ScalarCodecs.Float8
    , neq_ : OptionalArgument TrackingExpenses.ScalarCodecs.Float8
    , nin_ : OptionalArgument (List TrackingExpenses.ScalarCodecs.Float8)
    }


{-| Type for the Float8\_comparison\_exp input object.
-}
type alias Float8_comparison_exp =
    { eq_ : OptionalArgument TrackingExpenses.ScalarCodecs.Float8
    , gt_ : OptionalArgument TrackingExpenses.ScalarCodecs.Float8
    , gte_ : OptionalArgument TrackingExpenses.ScalarCodecs.Float8
    , in_ : OptionalArgument (List TrackingExpenses.ScalarCodecs.Float8)
    , is_null_ : OptionalArgument Bool
    , lt_ : OptionalArgument TrackingExpenses.ScalarCodecs.Float8
    , lte_ : OptionalArgument TrackingExpenses.ScalarCodecs.Float8
    , neq_ : OptionalArgument TrackingExpenses.ScalarCodecs.Float8
    , nin_ : OptionalArgument (List TrackingExpenses.ScalarCodecs.Float8)
    }


{-| Encode a Float8\_comparison\_exp into a value that can be used as an argument.
-}
encodeFloat8_comparison_exp : Float8_comparison_exp -> Value
encodeFloat8_comparison_exp input____ =
    Encode.maybeObject
        [ ( "_eq", (TrackingExpenses.ScalarCodecs.codecs |> TrackingExpenses.Scalar.unwrapEncoder .codecFloat8) |> Encode.optional input____.eq_ ), ( "_gt", (TrackingExpenses.ScalarCodecs.codecs |> TrackingExpenses.Scalar.unwrapEncoder .codecFloat8) |> Encode.optional input____.gt_ ), ( "_gte", (TrackingExpenses.ScalarCodecs.codecs |> TrackingExpenses.Scalar.unwrapEncoder .codecFloat8) |> Encode.optional input____.gte_ ), ( "_in", ((TrackingExpenses.ScalarCodecs.codecs |> TrackingExpenses.Scalar.unwrapEncoder .codecFloat8) |> Encode.list) |> Encode.optional input____.in_ ), ( "_is_null", Encode.bool |> Encode.optional input____.is_null_ ), ( "_lt", (TrackingExpenses.ScalarCodecs.codecs |> TrackingExpenses.Scalar.unwrapEncoder .codecFloat8) |> Encode.optional input____.lt_ ), ( "_lte", (TrackingExpenses.ScalarCodecs.codecs |> TrackingExpenses.Scalar.unwrapEncoder .codecFloat8) |> Encode.optional input____.lte_ ), ( "_neq", (TrackingExpenses.ScalarCodecs.codecs |> TrackingExpenses.Scalar.unwrapEncoder .codecFloat8) |> Encode.optional input____.neq_ ), ( "_nin", ((TrackingExpenses.ScalarCodecs.codecs |> TrackingExpenses.Scalar.unwrapEncoder .codecFloat8) |> Encode.list) |> Encode.optional input____.nin_ ) ]


buildString_comparison_exp :
    (String_comparison_expOptionalFields -> String_comparison_expOptionalFields)
    -> String_comparison_exp
buildString_comparison_exp fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { eq_ = Absent, gt_ = Absent, gte_ = Absent, ilike_ = Absent, in_ = Absent, iregex_ = Absent, is_null_ = Absent, like_ = Absent, lt_ = Absent, lte_ = Absent, neq_ = Absent, nilike_ = Absent, nin_ = Absent, niregex_ = Absent, nlike_ = Absent, nregex_ = Absent, nsimilar_ = Absent, regex_ = Absent, similar_ = Absent }
    in
    { eq_ = optionals____.eq_, gt_ = optionals____.gt_, gte_ = optionals____.gte_, ilike_ = optionals____.ilike_, in_ = optionals____.in_, iregex_ = optionals____.iregex_, is_null_ = optionals____.is_null_, like_ = optionals____.like_, lt_ = optionals____.lt_, lte_ = optionals____.lte_, neq_ = optionals____.neq_, nilike_ = optionals____.nilike_, nin_ = optionals____.nin_, niregex_ = optionals____.niregex_, nlike_ = optionals____.nlike_, nregex_ = optionals____.nregex_, nsimilar_ = optionals____.nsimilar_, regex_ = optionals____.regex_, similar_ = optionals____.similar_ }


type alias String_comparison_expOptionalFields =
    { eq_ : OptionalArgument String
    , gt_ : OptionalArgument String
    , gte_ : OptionalArgument String
    , ilike_ : OptionalArgument String
    , in_ : OptionalArgument (List String)
    , iregex_ : OptionalArgument String
    , is_null_ : OptionalArgument Bool
    , like_ : OptionalArgument String
    , lt_ : OptionalArgument String
    , lte_ : OptionalArgument String
    , neq_ : OptionalArgument String
    , nilike_ : OptionalArgument String
    , nin_ : OptionalArgument (List String)
    , niregex_ : OptionalArgument String
    , nlike_ : OptionalArgument String
    , nregex_ : OptionalArgument String
    , nsimilar_ : OptionalArgument String
    , regex_ : OptionalArgument String
    , similar_ : OptionalArgument String
    }


{-| Type for the String\_comparison\_exp input object.
-}
type alias String_comparison_exp =
    { eq_ : OptionalArgument String
    , gt_ : OptionalArgument String
    , gte_ : OptionalArgument String
    , ilike_ : OptionalArgument String
    , in_ : OptionalArgument (List String)
    , iregex_ : OptionalArgument String
    , is_null_ : OptionalArgument Bool
    , like_ : OptionalArgument String
    , lt_ : OptionalArgument String
    , lte_ : OptionalArgument String
    , neq_ : OptionalArgument String
    , nilike_ : OptionalArgument String
    , nin_ : OptionalArgument (List String)
    , niregex_ : OptionalArgument String
    , nlike_ : OptionalArgument String
    , nregex_ : OptionalArgument String
    , nsimilar_ : OptionalArgument String
    , regex_ : OptionalArgument String
    , similar_ : OptionalArgument String
    }


{-| Encode a String\_comparison\_exp into a value that can be used as an argument.
-}
encodeString_comparison_exp : String_comparison_exp -> Value
encodeString_comparison_exp input____ =
    Encode.maybeObject
        [ ( "_eq", Encode.string |> Encode.optional input____.eq_ ), ( "_gt", Encode.string |> Encode.optional input____.gt_ ), ( "_gte", Encode.string |> Encode.optional input____.gte_ ), ( "_ilike", Encode.string |> Encode.optional input____.ilike_ ), ( "_in", (Encode.string |> Encode.list) |> Encode.optional input____.in_ ), ( "_iregex", Encode.string |> Encode.optional input____.iregex_ ), ( "_is_null", Encode.bool |> Encode.optional input____.is_null_ ), ( "_like", Encode.string |> Encode.optional input____.like_ ), ( "_lt", Encode.string |> Encode.optional input____.lt_ ), ( "_lte", Encode.string |> Encode.optional input____.lte_ ), ( "_neq", Encode.string |> Encode.optional input____.neq_ ), ( "_nilike", Encode.string |> Encode.optional input____.nilike_ ), ( "_nin", (Encode.string |> Encode.list) |> Encode.optional input____.nin_ ), ( "_niregex", Encode.string |> Encode.optional input____.niregex_ ), ( "_nlike", Encode.string |> Encode.optional input____.nlike_ ), ( "_nregex", Encode.string |> Encode.optional input____.nregex_ ), ( "_nsimilar", Encode.string |> Encode.optional input____.nsimilar_ ), ( "_regex", Encode.string |> Encode.optional input____.regex_ ), ( "_similar", Encode.string |> Encode.optional input____.similar_ ) ]


buildUuid_comparison_exp :
    (Uuid_comparison_expOptionalFields -> Uuid_comparison_expOptionalFields)
    -> Uuid_comparison_exp
buildUuid_comparison_exp fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { eq_ = Absent, gt_ = Absent, gte_ = Absent, in_ = Absent, is_null_ = Absent, lt_ = Absent, lte_ = Absent, neq_ = Absent, nin_ = Absent }
    in
    { eq_ = optionals____.eq_, gt_ = optionals____.gt_, gte_ = optionals____.gte_, in_ = optionals____.in_, is_null_ = optionals____.is_null_, lt_ = optionals____.lt_, lte_ = optionals____.lte_, neq_ = optionals____.neq_, nin_ = optionals____.nin_ }


type alias Uuid_comparison_expOptionalFields =
    { eq_ : OptionalArgument TrackingExpenses.ScalarCodecs.Uuid
    , gt_ : OptionalArgument TrackingExpenses.ScalarCodecs.Uuid
    , gte_ : OptionalArgument TrackingExpenses.ScalarCodecs.Uuid
    , in_ : OptionalArgument (List TrackingExpenses.ScalarCodecs.Uuid)
    , is_null_ : OptionalArgument Bool
    , lt_ : OptionalArgument TrackingExpenses.ScalarCodecs.Uuid
    , lte_ : OptionalArgument TrackingExpenses.ScalarCodecs.Uuid
    , neq_ : OptionalArgument TrackingExpenses.ScalarCodecs.Uuid
    , nin_ : OptionalArgument (List TrackingExpenses.ScalarCodecs.Uuid)
    }


{-| Type for the Uuid\_comparison\_exp input object.
-}
type alias Uuid_comparison_exp =
    { eq_ : OptionalArgument TrackingExpenses.ScalarCodecs.Uuid
    , gt_ : OptionalArgument TrackingExpenses.ScalarCodecs.Uuid
    , gte_ : OptionalArgument TrackingExpenses.ScalarCodecs.Uuid
    , in_ : OptionalArgument (List TrackingExpenses.ScalarCodecs.Uuid)
    , is_null_ : OptionalArgument Bool
    , lt_ : OptionalArgument TrackingExpenses.ScalarCodecs.Uuid
    , lte_ : OptionalArgument TrackingExpenses.ScalarCodecs.Uuid
    , neq_ : OptionalArgument TrackingExpenses.ScalarCodecs.Uuid
    , nin_ : OptionalArgument (List TrackingExpenses.ScalarCodecs.Uuid)
    }


{-| Encode a Uuid\_comparison\_exp into a value that can be used as an argument.
-}
encodeUuid_comparison_exp : Uuid_comparison_exp -> Value
encodeUuid_comparison_exp input____ =
    Encode.maybeObject
        [ ( "_eq", (TrackingExpenses.ScalarCodecs.codecs |> TrackingExpenses.Scalar.unwrapEncoder .codecUuid) |> Encode.optional input____.eq_ ), ( "_gt", (TrackingExpenses.ScalarCodecs.codecs |> TrackingExpenses.Scalar.unwrapEncoder .codecUuid) |> Encode.optional input____.gt_ ), ( "_gte", (TrackingExpenses.ScalarCodecs.codecs |> TrackingExpenses.Scalar.unwrapEncoder .codecUuid) |> Encode.optional input____.gte_ ), ( "_in", ((TrackingExpenses.ScalarCodecs.codecs |> TrackingExpenses.Scalar.unwrapEncoder .codecUuid) |> Encode.list) |> Encode.optional input____.in_ ), ( "_is_null", Encode.bool |> Encode.optional input____.is_null_ ), ( "_lt", (TrackingExpenses.ScalarCodecs.codecs |> TrackingExpenses.Scalar.unwrapEncoder .codecUuid) |> Encode.optional input____.lt_ ), ( "_lte", (TrackingExpenses.ScalarCodecs.codecs |> TrackingExpenses.Scalar.unwrapEncoder .codecUuid) |> Encode.optional input____.lte_ ), ( "_neq", (TrackingExpenses.ScalarCodecs.codecs |> TrackingExpenses.Scalar.unwrapEncoder .codecUuid) |> Encode.optional input____.neq_ ), ( "_nin", ((TrackingExpenses.ScalarCodecs.codecs |> TrackingExpenses.Scalar.unwrapEncoder .codecUuid) |> Encode.list) |> Encode.optional input____.nin_ ) ]
