-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module TrackingExpenses.Mutation exposing (..)

import Graphql.Internal.Builder.Argument as Argument exposing (Argument)
import Graphql.Internal.Builder.Object as Object
import Graphql.Internal.Encode as Encode exposing (Value)
import Graphql.Operation exposing (RootMutation, RootQuery, RootSubscription)
import Graphql.OptionalArgument exposing (OptionalArgument(..))
import Graphql.SelectionSet exposing (SelectionSet)
import Json.Decode as Decode exposing (Decoder)
import TrackingExpenses.InputObject
import TrackingExpenses.Interface
import TrackingExpenses.Object
import TrackingExpenses.Scalar
import TrackingExpenses.ScalarCodecs
import TrackingExpenses.Union


type alias DeleteExpensesBacCredomaticRequiredArguments =
    { where_ : TrackingExpenses.InputObject.Expenses_bac_credomatic_bool_exp }


{-| delete data from the table: "expenses.bac\_credomatic"

  - where\_ - filter the rows which have to be deleted

-}
delete_expenses_bac_credomatic :
    DeleteExpensesBacCredomaticRequiredArguments
    -> SelectionSet decodesTo TrackingExpenses.Object.Expenses_bac_credomatic_mutation_response
    -> SelectionSet (Maybe decodesTo) RootMutation
delete_expenses_bac_credomatic requiredArgs____ object____ =
    Object.selectionForCompositeField "delete_expenses_bac_credomatic" [ Argument.required "where" requiredArgs____.where_ TrackingExpenses.InputObject.encodeExpenses_bac_credomatic_bool_exp ] object____ (Basics.identity >> Decode.nullable)


type alias DeleteExpensesBacCredomaticByPkRequiredArguments =
    { id : TrackingExpenses.ScalarCodecs.Uuid }


{-| delete single row from the table: "expenses.bac\_credomatic"
-}
delete_expenses_bac_credomatic_by_pk :
    DeleteExpensesBacCredomaticByPkRequiredArguments
    -> SelectionSet decodesTo TrackingExpenses.Object.Expenses_bac_credomatic
    -> SelectionSet (Maybe decodesTo) RootMutation
delete_expenses_bac_credomatic_by_pk requiredArgs____ object____ =
    Object.selectionForCompositeField "delete_expenses_bac_credomatic_by_pk" [ Argument.required "id" requiredArgs____.id (TrackingExpenses.ScalarCodecs.codecs |> TrackingExpenses.Scalar.unwrapEncoder .codecUuid) ] object____ (Basics.identity >> Decode.nullable)


type alias InsertExpensesBacCredomaticOptionalArguments =
    { on_conflict : OptionalArgument TrackingExpenses.InputObject.Expenses_bac_credomatic_on_conflict }


type alias InsertExpensesBacCredomaticRequiredArguments =
    { objects : List TrackingExpenses.InputObject.Expenses_bac_credomatic_insert_input }


{-| insert data into the table: "expenses.bac\_credomatic"

  - objects - the rows to be inserted
  - on\_conflict - on conflict condition

-}
insert_expenses_bac_credomatic :
    (InsertExpensesBacCredomaticOptionalArguments -> InsertExpensesBacCredomaticOptionalArguments)
    -> InsertExpensesBacCredomaticRequiredArguments
    -> SelectionSet decodesTo TrackingExpenses.Object.Expenses_bac_credomatic_mutation_response
    -> SelectionSet (Maybe decodesTo) RootMutation
insert_expenses_bac_credomatic fillInOptionals____ requiredArgs____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { on_conflict = Absent }

        optionalArgs____ =
            [ Argument.optional "on_conflict" filledInOptionals____.on_conflict TrackingExpenses.InputObject.encodeExpenses_bac_credomatic_on_conflict ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "insert_expenses_bac_credomatic" (optionalArgs____ ++ [ Argument.required "objects" requiredArgs____.objects (TrackingExpenses.InputObject.encodeExpenses_bac_credomatic_insert_input |> Encode.list) ]) object____ (Basics.identity >> Decode.nullable)


type alias InsertExpensesBacCredomaticOneOptionalArguments =
    { on_conflict : OptionalArgument TrackingExpenses.InputObject.Expenses_bac_credomatic_on_conflict }


type alias InsertExpensesBacCredomaticOneRequiredArguments =
    { object : TrackingExpenses.InputObject.Expenses_bac_credomatic_insert_input }


{-| insert a single row into the table: "expenses.bac\_credomatic"

  - object - the row to be inserted
  - on\_conflict - on conflict condition

-}
insert_expenses_bac_credomatic_one :
    (InsertExpensesBacCredomaticOneOptionalArguments -> InsertExpensesBacCredomaticOneOptionalArguments)
    -> InsertExpensesBacCredomaticOneRequiredArguments
    -> SelectionSet decodesTo TrackingExpenses.Object.Expenses_bac_credomatic
    -> SelectionSet (Maybe decodesTo) RootMutation
insert_expenses_bac_credomatic_one fillInOptionals____ requiredArgs____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { on_conflict = Absent }

        optionalArgs____ =
            [ Argument.optional "on_conflict" filledInOptionals____.on_conflict TrackingExpenses.InputObject.encodeExpenses_bac_credomatic_on_conflict ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "insert_expenses_bac_credomatic_one" (optionalArgs____ ++ [ Argument.required "object" requiredArgs____.object TrackingExpenses.InputObject.encodeExpenses_bac_credomatic_insert_input ]) object____ (Basics.identity >> Decode.nullable)


type alias UpdateExpensesBacCredomaticOptionalArguments =
    { inc_ : OptionalArgument TrackingExpenses.InputObject.Expenses_bac_credomatic_inc_input
    , set_ : OptionalArgument TrackingExpenses.InputObject.Expenses_bac_credomatic_set_input
    }


type alias UpdateExpensesBacCredomaticRequiredArguments =
    { where_ : TrackingExpenses.InputObject.Expenses_bac_credomatic_bool_exp }


{-| update data of the table: "expenses.bac\_credomatic"

  - inc\_ - increments the numeric columns with given value of the filtered values
  - set\_ - sets the columns of the filtered rows to the given values
  - where\_ - filter the rows which have to be updated

-}
update_expenses_bac_credomatic :
    (UpdateExpensesBacCredomaticOptionalArguments -> UpdateExpensesBacCredomaticOptionalArguments)
    -> UpdateExpensesBacCredomaticRequiredArguments
    -> SelectionSet decodesTo TrackingExpenses.Object.Expenses_bac_credomatic_mutation_response
    -> SelectionSet (Maybe decodesTo) RootMutation
update_expenses_bac_credomatic fillInOptionals____ requiredArgs____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { inc_ = Absent, set_ = Absent }

        optionalArgs____ =
            [ Argument.optional "_inc" filledInOptionals____.inc_ TrackingExpenses.InputObject.encodeExpenses_bac_credomatic_inc_input, Argument.optional "_set" filledInOptionals____.set_ TrackingExpenses.InputObject.encodeExpenses_bac_credomatic_set_input ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "update_expenses_bac_credomatic" (optionalArgs____ ++ [ Argument.required "where" requiredArgs____.where_ TrackingExpenses.InputObject.encodeExpenses_bac_credomatic_bool_exp ]) object____ (Basics.identity >> Decode.nullable)


type alias UpdateExpensesBacCredomaticByPkOptionalArguments =
    { inc_ : OptionalArgument TrackingExpenses.InputObject.Expenses_bac_credomatic_inc_input
    , set_ : OptionalArgument TrackingExpenses.InputObject.Expenses_bac_credomatic_set_input
    }


type alias UpdateExpensesBacCredomaticByPkRequiredArguments =
    { pk_columns : TrackingExpenses.InputObject.Expenses_bac_credomatic_pk_columns_input }


{-| update single row of the table: "expenses.bac\_credomatic"

  - inc\_ - increments the numeric columns with given value of the filtered values
  - set\_ - sets the columns of the filtered rows to the given values

-}
update_expenses_bac_credomatic_by_pk :
    (UpdateExpensesBacCredomaticByPkOptionalArguments -> UpdateExpensesBacCredomaticByPkOptionalArguments)
    -> UpdateExpensesBacCredomaticByPkRequiredArguments
    -> SelectionSet decodesTo TrackingExpenses.Object.Expenses_bac_credomatic
    -> SelectionSet (Maybe decodesTo) RootMutation
update_expenses_bac_credomatic_by_pk fillInOptionals____ requiredArgs____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { inc_ = Absent, set_ = Absent }

        optionalArgs____ =
            [ Argument.optional "_inc" filledInOptionals____.inc_ TrackingExpenses.InputObject.encodeExpenses_bac_credomatic_inc_input, Argument.optional "_set" filledInOptionals____.set_ TrackingExpenses.InputObject.encodeExpenses_bac_credomatic_set_input ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "update_expenses_bac_credomatic_by_pk" (optionalArgs____ ++ [ Argument.required "pk_columns" requiredArgs____.pk_columns TrackingExpenses.InputObject.encodeExpenses_bac_credomatic_pk_columns_input ]) object____ (Basics.identity >> Decode.nullable)
