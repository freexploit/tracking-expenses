-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module TrackingExpenses.Query exposing (..)

import Graphql.Internal.Builder.Argument as Argument exposing (Argument)
import Graphql.Internal.Builder.Object as Object
import Graphql.Internal.Encode as Encode exposing (Value)
import Graphql.Operation exposing (RootMutation, RootQuery, RootSubscription)
import Graphql.OptionalArgument exposing (OptionalArgument(..))
import Graphql.SelectionSet exposing (SelectionSet)
import Json.Decode as Decode exposing (Decoder)
import TrackingExpenses.Enum.Expenses_bac_credomatic_select_column
import TrackingExpenses.InputObject
import TrackingExpenses.Interface
import TrackingExpenses.Object
import TrackingExpenses.Scalar
import TrackingExpenses.ScalarCodecs
import TrackingExpenses.Union


type alias ExpensesBacCredomaticOptionalArguments =
    { distinct_on : OptionalArgument (List TrackingExpenses.Enum.Expenses_bac_credomatic_select_column.Expenses_bac_credomatic_select_column)
    , limit : OptionalArgument Int
    , offset : OptionalArgument Int
    , order_by : OptionalArgument (List TrackingExpenses.InputObject.Expenses_bac_credomatic_order_by)
    , where_ : OptionalArgument TrackingExpenses.InputObject.Expenses_bac_credomatic_bool_exp
    }


{-| fetch data from the table: "expenses.bac\_credomatic"

  - distinct\_on - distinct select on columns
  - limit - limit the number of rows returned
  - offset - skip the first n rows. Use only with order\_by
  - order\_by - sort the rows by one or more columns
  - where\_ - filter the rows returned

-}
expenses_bac_credomatic :
    (ExpensesBacCredomaticOptionalArguments -> ExpensesBacCredomaticOptionalArguments)
    -> SelectionSet decodesTo TrackingExpenses.Object.Expenses_bac_credomatic
    -> SelectionSet (List decodesTo) RootQuery
expenses_bac_credomatic fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { distinct_on = Absent, limit = Absent, offset = Absent, order_by = Absent, where_ = Absent }

        optionalArgs____ =
            [ Argument.optional "distinct_on" filledInOptionals____.distinct_on (Encode.enum TrackingExpenses.Enum.Expenses_bac_credomatic_select_column.toString |> Encode.list), Argument.optional "limit" filledInOptionals____.limit Encode.int, Argument.optional "offset" filledInOptionals____.offset Encode.int, Argument.optional "order_by" filledInOptionals____.order_by (TrackingExpenses.InputObject.encodeExpenses_bac_credomatic_order_by |> Encode.list), Argument.optional "where" filledInOptionals____.where_ TrackingExpenses.InputObject.encodeExpenses_bac_credomatic_bool_exp ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "expenses_bac_credomatic" optionalArgs____ object____ (Basics.identity >> Decode.list)


type alias ExpensesBacCredomaticAggregateOptionalArguments =
    { distinct_on : OptionalArgument (List TrackingExpenses.Enum.Expenses_bac_credomatic_select_column.Expenses_bac_credomatic_select_column)
    , limit : OptionalArgument Int
    , offset : OptionalArgument Int
    , order_by : OptionalArgument (List TrackingExpenses.InputObject.Expenses_bac_credomatic_order_by)
    , where_ : OptionalArgument TrackingExpenses.InputObject.Expenses_bac_credomatic_bool_exp
    }


{-| fetch aggregated fields from the table: "expenses.bac\_credomatic"

  - distinct\_on - distinct select on columns
  - limit - limit the number of rows returned
  - offset - skip the first n rows. Use only with order\_by
  - order\_by - sort the rows by one or more columns
  - where\_ - filter the rows returned

-}
expenses_bac_credomatic_aggregate :
    (ExpensesBacCredomaticAggregateOptionalArguments -> ExpensesBacCredomaticAggregateOptionalArguments)
    -> SelectionSet decodesTo TrackingExpenses.Object.Expenses_bac_credomatic_aggregate
    -> SelectionSet decodesTo RootQuery
expenses_bac_credomatic_aggregate fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { distinct_on = Absent, limit = Absent, offset = Absent, order_by = Absent, where_ = Absent }

        optionalArgs____ =
            [ Argument.optional "distinct_on" filledInOptionals____.distinct_on (Encode.enum TrackingExpenses.Enum.Expenses_bac_credomatic_select_column.toString |> Encode.list), Argument.optional "limit" filledInOptionals____.limit Encode.int, Argument.optional "offset" filledInOptionals____.offset Encode.int, Argument.optional "order_by" filledInOptionals____.order_by (TrackingExpenses.InputObject.encodeExpenses_bac_credomatic_order_by |> Encode.list), Argument.optional "where" filledInOptionals____.where_ TrackingExpenses.InputObject.encodeExpenses_bac_credomatic_bool_exp ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "expenses_bac_credomatic_aggregate" optionalArgs____ object____ Basics.identity


type alias ExpensesBacCredomaticByPkRequiredArguments =
    { id : TrackingExpenses.ScalarCodecs.Uuid }


{-| fetch data from the table: "expenses.bac\_credomatic" using primary key columns
-}
expenses_bac_credomatic_by_pk :
    ExpensesBacCredomaticByPkRequiredArguments
    -> SelectionSet decodesTo TrackingExpenses.Object.Expenses_bac_credomatic
    -> SelectionSet (Maybe decodesTo) RootQuery
expenses_bac_credomatic_by_pk requiredArgs____ object____ =
    Object.selectionForCompositeField "expenses_bac_credomatic_by_pk" [ Argument.required "id" requiredArgs____.id (TrackingExpenses.ScalarCodecs.codecs |> TrackingExpenses.Scalar.unwrapEncoder .codecUuid) ] object____ (Basics.identity >> Decode.nullable)
