-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Expenses.Enum.Expenses_bac_credomatic_constraint exposing (..)

import Json.Decode as Decode exposing (Decoder)


{-| unique or primary key constraints on table "expenses\_bac\_credomatic"

  - Expenses\_bac\_credomatic\_pkey - unique or primary key constraint

-}
type Expenses_bac_credomatic_constraint
    = Expenses_bac_credomatic_pkey


list : List Expenses_bac_credomatic_constraint
list =
    [ Expenses_bac_credomatic_pkey ]


decoder : Decoder Expenses_bac_credomatic_constraint
decoder =
    Decode.string
        |> Decode.andThen
            (\string ->
                case string of
                    "expenses_bac_credomatic_pkey" ->
                        Decode.succeed Expenses_bac_credomatic_pkey

                    _ ->
                        Decode.fail ("Invalid Expenses_bac_credomatic_constraint type, " ++ string ++ " try re-running the @dillonkearns/elm-graphql CLI ")
            )


{-| Convert from the union type representing the Enum to a string that the GraphQL server will recognize.
-}
toString : Expenses_bac_credomatic_constraint -> String
toString enum____ =
    case enum____ of
        Expenses_bac_credomatic_pkey ->
            "expenses_bac_credomatic_pkey"


{-| Convert from a String representation to an elm representation enum.
This is the inverse of the Enum `toString` function. So you can call `toString` and then convert back `fromString` safely.

    Swapi.Enum.Episode.NewHope
        |> Swapi.Enum.Episode.toString
        |> Swapi.Enum.Episode.fromString
        == Just NewHope

This can be useful for generating Strings to use for <select> menus to check which item was selected.

-}
fromString : String -> Maybe Expenses_bac_credomatic_constraint
fromString enumString____ =
    case enumString____ of
        "expenses_bac_credomatic_pkey" ->
            Just Expenses_bac_credomatic_pkey

        _ ->
            Nothing
